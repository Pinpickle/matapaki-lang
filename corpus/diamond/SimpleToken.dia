type State = {
  minter: Address,
  balances: [Address => Nat],
}

fun init: { environment: Environment } -> State {
  return {
    minter = environment.sender,
    balances = [],
  };
}

fun mint: { environment: Environment, state: State, owner: Address, amount: Nat } -> { return: {}, state: State } {
  if (environment.sender != state.minter) {
    abort();
  }

  return {
    value = {},
    state = {
      ...state,
      balances = [
        ...state.balances,
        (owner): state.balances[owner] + amount,
      ],
    },
  };
}

fun send: { environment: Environment, to: Address, amount: Nat } -> { value: {}, state: State } {
  if (state.balances[environment.sender] < amount) {
    abort();
  }

  return {
    value = {},
    state = {
      ...state,
      balances = [
        ...state.balances,
        (to): state.balances[to] + amount,
        (environment.sender): state.balances[environment.sender] - amount,
      ],
    },
  };
}

fun queryBalance: { environment: Environment, state: State, for: Address } -> { value: Nat, state: State } {
  return {
    value = state.balances[for],
    state = state,
  }
}

contract SimpleToken {
  init,
  payable = {
    default = abort
  },
  external = {
    mint,
    send,
    queryBalance,
  },
}
