State [Address -> Uint]

fun init: { } -> Effect (ReadEnv) [Address -> Uint]
  arg -> [Address -> Uint] with [
    message.sender! -> 1000000
  ]

fun transfer_in_state: { state: [Address -> Uint], arg: { recipient: Address, amount: Uint } } -> Effect (ReadEnv) { state: [Address -> Uint], value: { } }
  arg ->
    require (arg.state[message.sender!] > arg.arg.amount) then
    require (arg.state[arg.arg.recipient] + arg.arg.amount > arg.state[arg.arg.recipient]) then
    {
      state = arg.state with [
        message.sender! -> arg.state[message.sender!] - arg.arg.amount,
        arg.arg.recipient -> arg.state[arg.arg.recipient] + arg.arg.amount
      ],
      value = { }
    }

fun balance_from_state: { state: [Address -> Uint], arg: Address } -> Uint
  arg -> arg.state[arg.arg]

export fun transfer: { recipient: Address, amount: Uint } -> Effect (ReadEnv, Read, Write) { }
  as transfer_in_state updating_state

export fun balance: Address -> Effect (Read) Uint
  as balance_from_state with_state
