State {
  one: [Uint -> Uint],
  two: [Uint -> Uint]
}

fun init: { } -> { one: [Uint -> Uint], two: [Uint -> Uint] }
  arg -> {
    one = [Uint -> Uint],
    two = [Uint -> Uint]
  }

fun get_value_from_one_in_state: { state: { one: [Uint -> Uint], two: [Uint -> Uint] }, arg: Uint } -> Uint
  arg -> arg.state.one[arg.arg]

fun set_value_in_one_in_state: { state: { one: [Uint -> Uint], two: [Uint -> Uint] }, arg: { key: Uint, value: Uint } } -> { state: { one: [Uint -> Uint], two: [Uint -> Uint] }, value: { } }
  arg -> {
    state = arg.state with {
      one = arg.state.one with [
        arg.arg.key -> arg.arg.value
      ]
    },
    value = { }
  }

fun swap_one_and_two_in_state: { state: { one: [Uint -> Uint], two: [Uint -> Uint] }, arg: { } } -> { state: { one: [Uint -> Uint], two: [Uint -> Uint] }, value: { } }
  arg -> {
    state = {
      one = arg.state.two,
      two = arg.state.one
    },
    value = { }
  }

export fun get_from_one: Uint -> Effect (Read) Uint
  as get_value_from_one_in_state with_state

export fun set_to_one: { key: Uint, value: Uint } -> Effect (Read, Write) { }
  as set_value_in_one_in_state updating_state

export fun swap_one_and_two: { } -> Effect (Read, Write) { }
  as swap_one_and_two_in_state updating_state