State [Uint -> [Uint -> Uint]]

fun init: { } -> [Uint -> [Uint -> Uint]]
  arg -> [Uint -> [Uint -> Uint]]

fun get_from_state: { state: [Uint -> [Uint -> Uint]], arg: { key1: Uint, key2: Uint } } -> Uint
  arg -> arg.state[arg.arg.key1][arg.arg.key2]

fun set_in_state: { state: [Uint -> [Uint -> Uint]], arg: { key1: Uint, key2: Uint, value: Uint } } -> { state: [Uint -> [Uint -> Uint]], value: { } }
  arg -> {
    state = arg.state with [
      arg.arg.key1 -> arg.state[arg.arg.key1] with [
        arg.arg.key2 -> arg.arg.value
      ]
    ],
    value = { }
  }

export fun get: { key1: Uint, key2: Uint } -> Effect (Read) Uint
  as get_from_state with_state

export fun set: { key1: Uint, key2: Uint, value: Uint } -> Effect (Read, Write) { }
  as set_in_state updating_state
